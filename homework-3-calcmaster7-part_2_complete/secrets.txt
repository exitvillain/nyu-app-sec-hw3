 For part 1 , I used Kubernetes secrets for two pieces of sensitive data in our Django application the mysql root password and the Django secret key.  To implement this, I only needed to change code in three places. In Django-deploym.yaml, db-deploymenet.yaml and settings.py 

Once I made my chances in the three places I indicated, I had to rebuild all docker containers. After that, I used a single command to set the secrets. After that, I did the three Kubectl apply commands again.  One reason this approach is useful is that if I ever wanted to change the mysql rot password from thisisatestthing. To something else, I could just re execute the command. I don't have to go into my application and change the code anywhere.

Exact set of commands I used to implement secrets:

minikube delete

minikube start

eval $(minikube docker-env)

docker build -t nyuappsec/assign3:v0 .
docker build -t nyuappsec/assign3-proxy:v0 proxy/
docker build -t nyuappsec/assign3-db:v0 db/


kubectl create secret generic mysecretdictionary \
  --from-literal=mysql_root_password='thisisatestthing.' \
  --from-literal=djangokey='kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l'\

kubectl apply -f db/k8
kubectl apply -f GiftcardSite/k8
kubectl apply -f proxy/k8

kubectl port-forward service/proxy-service 7080:8080


To verify that everything is working correctly, I did Kubectl get pods and Kubectl get service
I went to localhost:7080 and checked that the functionality of the site still works. I tried 
Interacting with the database by logging in , registering, and using cards. Everything works!
As another layer of confirmation, I did kubectl exec <podname> -- env, and I got a long list of variables , 2 of them being: MYSQL_ROOT_PASSWORD=thisisatestthing.
SECRET_KEY=kmgysa#fz+9(z1*=c0ydrjizk*7sthm2ga1z4=^61$cxcq8b$l .  In the original app,  there was no environment variable named SECRET_KEY, so it looks like what I have is working!
